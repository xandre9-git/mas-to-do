(()=>{"use strict";var e={28:(e,n,t)=>{t.d(n,{Z:()=>b});var o=t(537),a=t.n(o),r=t(645),i=t.n(r),s=t(667),c=t.n(s),d=new URL(t(776),t.b),l=new URL(t(895),t.b),A=new URL(t(35),t.b),p=new URL(t(516),t.b),u=new URL(t(666),t.b),g=i()(a()),E=c()(d),m=c()(l),h=c()(A),f=c()(p),C=c()(u);g.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  /* border: 1px solid black; */\n}\n\n@font-face {\n  font-family: "Oswald";\n  src: url('+E+'), format("ttf");\n  font-weight: normal;\n  font-style: normal;\n}\n\nhtml,\nbody {\n  font: 1em "Oswald", monospace;\n  /* background-color: gold; */\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n}\n\nbutton {\n  background: none;\n  border: none;\n}\n\nul,\nli {\n  list-style-type: none;\n}\n\n#content {\n  display: grid;\n  grid-template-rows: 1fr 15fr;\n  grid-template-columns: 1fr 15fr;\n  height: 100%;\n  grid-template-areas:\n    "a a a a a"\n    "b c c c c"\n    "b c c c c"\n    "b c c c c";\n}\n\n#top-bar {\n  grid-area: a;\n  /* height: 50px; */\n  width: 100%;\n  background-color: gold;\n}\n\n#left-side-bar {\n  grid-area: b;\n  width: 18vw;\n  background-color: dodgerblue;\n}\n\n#to-dos-container {\n  grid-area: c;\n  background-color: lightgreen;\n}\n\n.task-boxes-container {\n  /* gets boxes to align as columns besides each other */\n  display: flex;\n  justify-content: space-around;\n  height: 100%;\n}\n\n.to-do-boxes {\n  background-color: #ffff88;\n  height: 90%;\n  width: 96%;\n  margin: 1% 2% 2% 2%;\n}\n\n.to-do-title {\n  color: palevioletred;\n  margin-left: 2%;\n}\n\n#add-task {\n  margin: 1%;\n  font-size: 2em;\n}\n\n#projects-title {\n  color: gold;\n  font-size: 2em;\n  text-align: center;\n  padding-top: 10;\n}\n\n#current-tasks,\n#task-details {\n  width: 50%;\n}\n\n#add-taskbar {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n#task-input-bar {\n  width: 90%;\n  height: 95%;\n}\n\n#add-task-btn {\n  font-size: 2em;\n}\n\n#task-details > div {\n  background-color: paleturquoise;\n}\n\n#task-details > h2 {\n  color: rgb(141, 92, 190);\n}\n\n#projects-container {\n  height: 100%;\n}\n\n.add-projects,\n.added-projects {\n  display: flex;\n  justify-content: space-between;\n  padding-left: 5%;\n  align-items: center;\n}\n\n.project-btns {\n  display: flex;\n  align-items: center;\n}\n\n.project-btns-container {\n  display: flex;\n}\n\n#edit-btn:hover {\n  /* Adds gold filter */\n  filter: invert(82%) sepia(58%) saturate(2058%) hue-rotate(359deg)\n    brightness(104%) contrast(107%);\n}\n\n#del-btn:hover {\n  /* Adds gold filter */\n  filter: invert(82%) sepia(58%) saturate(2058%) hue-rotate(359deg)\n    brightness(104%) contrast(107%);\n}\n\n#del-btn,\n#edit-btn {\n  height: 24px;\n  width: 24px;\n  background: none;\n}\n\n#detail-btns {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 1%;\n}\n\n#save-btn {\n  height: 24px;\n  width: 24px;\n  background-image: url('+m+");\n  background-size: 100% 100%;\n}\n\n#delete-btn {\n  height: 24px;\n  width: 24px;\n  background-image: url("+h+");\n  background-size: 100% 100%;\n}\n\n#cancel-btn {\n  height: 24px;\n  width: 24px;\n  background-image: url("+f+");\n  background-size: 100% 100%;\n}\n\n.added-projects:hover #del-btn {\n  background-image: url("+h+");\n  background-size: 100% 100%;\n}\n\n.added-projects:hover #edit-btn {\n  background-image: url("+C+");\n  background-size: 100% 100%;\n}\n\n.add-projects,\n.added-projects,\n.project-btns {\n  color: white;\n  cursor: pointer;\n  font-size: 1.25em;\n}\n\n.add-projects:hover {\n  color: gold;\n}\n\nli.added-projects:hover {\n  color: gold;\n}\n\n#add-task {\n  color: rebeccapurple;\n  /* text-decoration: none; */\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  margin-left: 2.5%;\n  margin-right: 2.5%;\n}\n\n.edit-and-checkbox-container {\n  display: flex;\n}\n\n.task-edit-btn, .task-del-btn {\n  background-size: 100% 100%;\n  height: 20px;\n  width: 20px;\n  filter: invert(24%) sepia(19%) saturate(5591%) hue-rotate(250deg) brightness(90%) contrast(92%);\n  padding: 2%;\n  background-image: url("+C+");\n}\n\n#task-edit-btn {\n  background-image: url("+C+");\n}\n\n#task-del-btn {\n  background-image: url("+h+');\n}\n\n#details {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin-left: 2%;\n  margin-right: 2%;\n}\n\n#details > h3 {\n  color: hotpink;\n}\n\n#detail-btns {\n  /* rebeccapurple */\n  filter: invert(24%) sepia(17%) saturate(6018%) hue-rotate(249deg) brightness(90%) contrast(93%);\n}\n\nselect {\n  width: auto;\n  box-sizing: border-box;\n}\n\ninput[type="date"], input[type="time"] {\n  width: 120px;\n  box-sizing: border-box;\n}\n\ntextarea#detail-desc {\n  height: 125px;\n  resize: none;\n}\n\n.filter-white {\n  filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(125deg)\n    brightness(100%) contrast(102%);\n}\n\n.title {\n  color: dodgerblue;\n  padding-left: 2.5%;\n}\n\n.checklist-task-item {\n  display: flex;\n  justify-content: space-between;\n  margin-left: 2.5%;\n  margin-right: 2.5%;\n  cursor: pointer;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  /* border: 1px solid black; */\n}\n\n@font-face {\n  font-family: "Oswald";\n  src: url("./fonts/Oswald-Regular.ttf"), format("ttf");\n  font-weight: normal;\n  font-style: normal;\n}\n\nhtml,\nbody {\n  font: 1em "Oswald", monospace;\n  /* background-color: gold; */\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n}\n\nbutton {\n  background: none;\n  border: none;\n}\n\nul,\nli {\n  list-style-type: none;\n}\n\n#content {\n  display: grid;\n  grid-template-rows: 1fr 15fr;\n  grid-template-columns: 1fr 15fr;\n  height: 100%;\n  grid-template-areas:\n    "a a a a a"\n    "b c c c c"\n    "b c c c c"\n    "b c c c c";\n}\n\n#top-bar {\n  grid-area: a;\n  /* height: 50px; */\n  width: 100%;\n  background-color: gold;\n}\n\n#left-side-bar {\n  grid-area: b;\n  width: 18vw;\n  background-color: dodgerblue;\n}\n\n#to-dos-container {\n  grid-area: c;\n  background-color: lightgreen;\n}\n\n.task-boxes-container {\n  /* gets boxes to align as columns besides each other */\n  display: flex;\n  justify-content: space-around;\n  height: 100%;\n}\n\n.to-do-boxes {\n  background-color: #ffff88;\n  height: 90%;\n  width: 96%;\n  margin: 1% 2% 2% 2%;\n}\n\n.to-do-title {\n  color: palevioletred;\n  margin-left: 2%;\n}\n\n#add-task {\n  margin: 1%;\n  font-size: 2em;\n}\n\n#projects-title {\n  color: gold;\n  font-size: 2em;\n  text-align: center;\n  padding-top: 10;\n}\n\n#current-tasks,\n#task-details {\n  width: 50%;\n}\n\n#add-taskbar {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n#task-input-bar {\n  width: 90%;\n  height: 95%;\n}\n\n#add-task-btn {\n  font-size: 2em;\n}\n\n#task-details > div {\n  background-color: paleturquoise;\n}\n\n#task-details > h2 {\n  color: rgb(141, 92, 190);\n}\n\n#projects-container {\n  height: 100%;\n}\n\n.add-projects,\n.added-projects {\n  display: flex;\n  justify-content: space-between;\n  padding-left: 5%;\n  align-items: center;\n}\n\n.project-btns {\n  display: flex;\n  align-items: center;\n}\n\n.project-btns-container {\n  display: flex;\n}\n\n#edit-btn:hover {\n  /* Adds gold filter */\n  filter: invert(82%) sepia(58%) saturate(2058%) hue-rotate(359deg)\n    brightness(104%) contrast(107%);\n}\n\n#del-btn:hover {\n  /* Adds gold filter */\n  filter: invert(82%) sepia(58%) saturate(2058%) hue-rotate(359deg)\n    brightness(104%) contrast(107%);\n}\n\n#del-btn,\n#edit-btn {\n  height: 24px;\n  width: 24px;\n  background: none;\n}\n\n#detail-btns {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 1%;\n}\n\n#save-btn {\n  height: 24px;\n  width: 24px;\n  background-image: url("./images/save.svg");\n  background-size: 100% 100%;\n}\n\n#delete-btn {\n  height: 24px;\n  width: 24px;\n  background-image: url("./images/delete.svg");\n  background-size: 100% 100%;\n}\n\n#cancel-btn {\n  height: 24px;\n  width: 24px;\n  background-image: url("./images/cancel.svg");\n  background-size: 100% 100%;\n}\n\n.added-projects:hover #del-btn {\n  background-image: url("./images/delete.svg");\n  background-size: 100% 100%;\n}\n\n.added-projects:hover #edit-btn {\n  background-image: url("./images/edit.svg");\n  background-size: 100% 100%;\n}\n\n.add-projects,\n.added-projects,\n.project-btns {\n  color: white;\n  cursor: pointer;\n  font-size: 1.25em;\n}\n\n.add-projects:hover {\n  color: gold;\n}\n\nli.added-projects:hover {\n  color: gold;\n}\n\n#add-task {\n  color: rebeccapurple;\n  /* text-decoration: none; */\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  margin-left: 2.5%;\n  margin-right: 2.5%;\n}\n\n.edit-and-checkbox-container {\n  display: flex;\n}\n\n.task-edit-btn, .task-del-btn {\n  background-size: 100% 100%;\n  height: 20px;\n  width: 20px;\n  filter: invert(24%) sepia(19%) saturate(5591%) hue-rotate(250deg) brightness(90%) contrast(92%);\n  padding: 2%;\n  background-image: url("./images/edit.svg");\n}\n\n#task-edit-btn {\n  background-image: url("./images/edit.svg");\n}\n\n#task-del-btn {\n  background-image: url("./images/delete.svg");\n}\n\n#details {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin-left: 2%;\n  margin-right: 2%;\n}\n\n#details > h3 {\n  color: hotpink;\n}\n\n#detail-btns {\n  /* rebeccapurple */\n  filter: invert(24%) sepia(17%) saturate(6018%) hue-rotate(249deg) brightness(90%) contrast(93%);\n}\n\nselect {\n  width: auto;\n  box-sizing: border-box;\n}\n\ninput[type="date"], input[type="time"] {\n  width: 120px;\n  box-sizing: border-box;\n}\n\ntextarea#detail-desc {\n  height: 125px;\n  resize: none;\n}\n\n.filter-white {\n  filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(125deg)\n    brightness(100%) contrast(102%);\n}\n\n.title {\n  color: dodgerblue;\n  padding-left: 2.5%;\n}\n\n.checklist-task-item {\n  display: flex;\n  justify-content: space-between;\n  margin-left: 2.5%;\n  margin-right: 2.5%;\n  cursor: pointer;\n}\n\n\n\n'],sourceRoot:""}]);const b=g},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var r={},i=[],s=0;s<e.length;s++){var c=e[s],d=o.base?c[0]+o.base:c[0],l=r[d]||0,A="".concat(d," ").concat(l);r[d]=l+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=a(u,o);o.byIndex=s,n.splice(s,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var s=t(r[i]);n[s].references--}for(var c=o(e,a),d=0;d<r.length;d++){var l=t(r[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}r=c}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},776:(e,n,t)=>{e.exports=t.p+"e815068d369177121fd8.ttf"},516:(e,n,t)=>{e.exports=t.p+"f4921acda7402550d70e.svg"},35:(e,n,t)=>{e.exports=t.p+"3270f2c93c8c138fa6cc.svg"},666:(e,n,t)=>{e.exports=t.p+"5b4bbee2e91b8855115c.svg"},895:(e,n,t)=>{e.exports=t.p+"60e32a3f51d4e174b563.svg"}},n={};function t(o){var a=n[o];if(void 0!==a)return a.exports;var r=n[o]={id:o,exports:{}};return e[o](r,r.exports,t),r.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),a=t.n(o),r=t(569),i=t.n(r),s=t(565),c=t.n(s),d=t(216),l=t.n(d),A=t(589),p=t.n(A),u=t(28),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=l(),n()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;let E=[],m=[{projectName:"Unnamed Project",currentTasks:[],completedTasks:[]}];function h(e,n){let t=function(e){const n=document.createElement("div");n.className="project-btns-container";const t=document.createElement("div");t.className="project-btns filter-white",t.id="edit-btn",t.title="Edit";const o=document.createElement("div");o.className="project-btns filter-white",o.id="del-btn",o.title="Delete",n.appendChild(t),n.appendChild(o);const a=document.createElement("li");return a.textContent=e,a.appendChild(n),a}(e);if(t.className="added-projects",t.id=t.textContent,""!=t.textContent)return n.prepend(t),n}function f(e,n){if(!e)return;const t=function(e){const n=document.createElement("div");n.className="task";const t=document.createElement("div");return t.className="checklist-task-item",t.textContent=e,n.appendChild(t),n}(e);t.classList.add("checklist-task-item");const o=t.firstChild,a=o.textContent,r=function(){const e=document.createElement("div");return e.className="task-edit-btn",e}();r.addEventListener("click",(function(){if(!n){o.contentEditable=!0,o.focus();const e=document.createRange();e.selectNodeContents(o),e.collapse(!1);const n=window.getSelection();n.removeAllRanges(),n.addRange(e)}}));const i=function(){const e=document.createElement("input");return e.type="checkbox",e}();i.classList.add("task-checkbox"),i.checked=n,i.addEventListener("change",(function(){this.checked?C.bind(this)():b.bind(this)()}));const s=document.createElement("div");return s.classList.add("edit-and-checkbox-container"),s.appendChild(r),s.appendChild(i),t.appendChild(s),n&&(t.classList.add("completed"),t.style.textDecoration="line-through",s.removeChild(r)),o.addEventListener("blur",(function(){o.contentEditable=!1;const n=o.textContent.trim();n&&(e=n,m[0].currentTasks.forEach((e=>{e.title===a&&(e.title=n,localStorage.setItem("projectTasks",JSON.stringify(m)),location.reload())})))})),t}function C(){let e=this.parentNode.parentNode.firstChild;console.log(`taskDescription: ${e}`),this.checked?(e.style.setProperty("text-decoration","line-through"),location.reload(),function(){let n=e.textContent,t=m[0].currentTasks.findIndex((e=>n==e.title)),[o]=m[0].currentTasks.splice(t,1);o.DateCompleted=new Date,m[0].completedTasks.push(o),localStorage.setItem("projectTasks",JSON.stringify(m))}.bind(this)()):e.style.removeProperty("text-decoration")}function b(){let e=this.parentNode.parentNode.firstChild;if(this.checked)e.style.setProperty("text-decoration","line-through");else{function n(){let n=e.textContent,t=m[0].completedTasks.findIndex((e=>e.title==n)),[o]=m[0].completedTasks.splice(t,1);delete o.DateCompleted,m[0].currentTasks.push(o),localStorage.setItem("projectTasks",JSON.stringify(m))}e.style.removeProperty("text-decoration"),location.reload(),n.call(this)}}function k(e,n){if(""!==e){let t=[],o=[];m[n].currentTasks.forEach((e=>{t.push(e.id)})),m[n].completedTasks.forEach((e=>{o.push(e.id)}));let a=1;for(;t.includes(a)||o.includes(a);)a++;let r={id:a,title:e,desc:"",dateDue:new Date,timeDue:"",priority:"None"};return m[n].currentTasks.push(r),window.localStorage.setItem("projectTasks",JSON.stringify(m)),r}}function B(e){if(console.log("editTaskDetailsDOM called"),console.log(`taskName: ${e}`),!m.find((n=>n.currentTasks.find((n=>n.title===e)))))return void console.error(`Project not found for task "${e}".`);const n=document.createElement("ul");n.id="details",n.setAttribute("data-task",e);const t=[{type:"h3",text:"Project"},{type:"select",id:"project-selector",options:[{text:"None"},...E.map((e=>({text:e})))]},{type:"h3",text:"Date Due"},{type:"input",id:"date-due",attributes:{type:"date"}},{type:"h3",text:"Task Priority"},{type:"select",id:"priority-selector",options:[{text:"None"},{text:"Low"},{text:"Medium"},{text:"High"}]},{type:"h3",text:"Time Due"},{type:"input",id:"time-due",attributes:{type:"time"}},{type:"h3",text:"Description"},{type:"textarea",id:"task-description",attributes:{placeholder:"Enter description."}}];for(const{type:e,text:o,id:a,options:r,attributes:i,title:s}of t){const t=document.createElement(e);if(o&&(t.textContent=o),a&&(t.id=a),r&&r.forEach((({text:e})=>{const n=document.createElement("option");n.textContent=e,t.appendChild(n)})),i)for(const[e,n]of Object.entries(i))t.setAttribute(e,n);s&&(t.title=s),n.appendChild(t)}const o=document.createElement("div");o.id="detail-btns";const a=[{type:"div",id:"save-btn",title:"Save Changes"},{type:"div",id:"cancel-btn",title:"Cancel Changes"},{type:"div",id:"delete-btn",title:"Delete Task"}];for(const{type:e,id:t,title:r}of a){const a=document.createElement(e);t&&(a.id=t),r&&(a.title=r),o.appendChild(a),n.appendChild(o)}return n.querySelector("#save-btn").addEventListener("click",(()=>{console.log("Testing this really quick")})),window.addEventListener("load",(()=>{const e=e=>{let n=0;for(let t=0;t<e.options.length;t++)e.options[t].text.length>n&&(n=e.options[t].text.length);e.style.width=n+4+"ch"};e(n.querySelector("#project-selector")),e(n.querySelector("#priority-selector"))})),n}new Date(2023,1,4),new Date,new Date,E=JSON.parse(window.localStorage.getItem("projectnames"))||[],console.log(`projects array: ${E}`),console.log("Type of projects array: "+typeof E),m=JSON.parse(window.localStorage.getItem("projectTasks"))||[{projectName:"Unnamed Project",currentTasks:[],completedTasks:[]}],console.log("projectTasks array: ",m),console.log("Type of projectTasks array: "+typeof m);const y=document.getElementById("content"),x=document.createElement("div");x.id="top-bar";const v=document.createElement("h1");v.textContent="Mas To Do",v.className="title";const j=document.createElement("div");j.id="left-side-bar";const w=document.createElement("div");w.id="projects-title",w.textContent="Projects";const T=document.createElement("div");T.id="projects-container";const S=document.createElement("ul");S.id="projects-ul";const N=document.createElement("li");N.className="add-projects",N.textContent="+ Add Project";const D=document.createElement("div");D.id="to-dos-container";const Y=document.createElement("div");Y.className="task-boxes-container";const z=document.createElement("div");z.id="current-tasks";const W=document.createElement("h2");W.className="to-do-title",W.textContent="Tasks",z.appendChild(W);const I=document.createElement("div");I.className="to-do-boxes",z.appendChild(I);const O=document.createElement("form");O.id="add-taskbar";const L=document.createElement("input");L.id="task-input-bar",L.placeholder="Add a task to complete",O.appendChild(L);const U=document.createElement("button");U.textContent="+",U.type="submit",U.id="add-task-btn",O.appendChild(U),U.addEventListener("click",(e=>{let n=document.getElementById("task-input-bar").value;if(""!=n){document.getElementById("task-input-bar").value="";const e=new k(n,0);I.appendChild(f(e.title)),localStorage.setItem("projectTasks",JSON.stringify(m))}})),I.appendChild(O),m?.forEach((e=>{e.currentTasks.forEach((e=>{console.log(`currentTask: ${e.title}`),I.appendChild(f(e.title))})),e.completedTasks.forEach((e=>{Array.isArray(e)?e.forEach((e=>{console.log(`completedTask (subtask): ${e.title}`),I.appendChild(f(e.title,!0))})):(console.log(`completedTask: ${e.title}`),I.appendChild(f(e.title,!0)))}))})),document.createElement("ul").id="current-tasks-ul";const q=document.createElement("li");q.className="add-task-li",q.textContent="";const P=document.createElement("div");P.id="task-details",P.style.display="none";const Z=document.createElement("h2");Z.className="to-do-title",Z.textContent="Details",P.appendChild(Z);const $=document.createElement("div");function R(e,...n){for(let t of n)e.appendChild(t)}$.className="to-do-boxes",P.appendChild($),B(),N.addEventListener("click",(function(){let e=prompt("Enter name of project:");return null==e||E.includes(e)||(E.push(e),window.localStorage.setItem("projectnames",JSON.stringify(E)),m.push({projectName:e,currentTasks:[],completedTasks:[]}),console.log(`projectTasks in DOMProjectAdder: ${m}`),localStorage.setItem("projectTasks",JSON.stringify(m)),h(e,S),console.log(`res value: ${e}`),window.localStorage.setItem("projectname",e)),h})),E?.forEach((e=>{h(e,S)})),R(S,N),R(T,S),R(x,v),R(y,x,j,D),R(Y,z,P),R(D,Y),R(j,w,T);const M=document.querySelectorAll("#edit-btn"),J=Array.from(M);J.forEach(((e,n)=>{e.addEventListener("click",(function(){console.log(`editBtnArr[i]: ${J[n].closest(".added-projects").id}`);const e=E.indexOf(J[n].closest(".added-projects").id);console.log(e);let t=prompt("Edit name:");null==t||E.includes(t)||(console.log("This if statement executed."),E[e]=t,console.log(E),window.localStorage.setItem("projectnames",JSON.stringify(E))),document.location.reload()}))}));const X=document.querySelectorAll("#del-btn"),F=Array.from(X);F.forEach(((e,n)=>{e.addEventListener("click",(function(){let e=F[n].closest(".added-projects").id;E=function(e,n){const t=n.indexOf(e);return n.splice(t,1),location.reload(),n}(e,E),window.localStorage.setItem("projectnames",JSON.stringify(E))}))}));const V=document.querySelectorAll("div.checklist-task-item");let _=Array.from(V),H=null,G="";_.forEach(((e,n)=>{e.childNodes[0].addEventListener("click",(function(){G=_[n].textContent,console.log(`selectedTaskTitle: ${G}`);const e=B(G);console.log(`detailsPane.getAttribute("data-task"): ${e.getAttribute("data-task")}`);const t=document.getElementById("task-details");console.log(`existingDetailsPane: ${t}`),"block"===t.style.display?console.log("Details pane already exists for this task."):$.appendChild(e),null!=H&&(H.style.color=""),_[n].style.color="#BF40BF",P.style.display="block",H=_[n]}))})),console.log(m)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,